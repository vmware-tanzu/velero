name: Main CI

on:
  push:
    branches:
      - 'main'
      - 'release-**'
    tags:
      - '*'

permissions:
  contents: read

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
      # Fix issue of setup-gcloud
      - run: |
          sudo apt-get install python2.7
          export CLOUDSDK_PYTHON="/usr/bin/python2"
      - id: 'auth'
        uses: google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2 # v2.1.4
        with:
          credentials_json: '${{ secrets.GCS_SA_KEY }}'
      - name: 'set up GCloud SDK'
        uses: google-github-actions/setup-gcloud@f0990588f1e5b5af6827153b93673613abdc6ec7 # v2.1.1
      - name: 'use gcloud CLI'
        run: |
          gcloud info
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1
        with:
          version: latest
      - name: Build
        run: |
          make local
          # Clean go cache to ease the build environment storage pressure.
          go clean -modcache -cache
      - name: Test
        run: make test
      - name: Upload test coverage
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.out
          verbose: true
      # Use the JSON key in secret to login gcr.io
      - uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: 'gcr.io' # or REGION.docker.pkg.dev
          username: '_json_key'
          password: '${{ secrets.GCR_SA_KEY }}'
      # Only try to publish the container image from the root repo; forks don't have permission to do so and will always get failures.
      - name: Publish container image
        if: github.repository == 'vmware-tanzu/velero'
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          docker system prune -a --force
              
          # Build and push Velero image to docker registry
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          VERSION=$(./hack/docker-push.sh | grep 'VERSION:' | awk -F: '{print $2}' | xargs)

          # Upload Velero image package to GCS
          source hack/ci/build_util.sh
          BIN=velero
          RESTORE_HELPER_BIN=velero-restore-helper
          GCS_BUCKET=velero-builds
          VELERO_IMAGE=${BIN}-${VERSION}
          VELERO_RESTORE_HELPER_IMAGE=${RESTORE_HELPER_BIN}-${VERSION}
          VELERO_IMAGE_FILE=${VELERO_IMAGE}.tar.gz
          VELERO_RESTORE_HELPER_IMAGE_FILE=${VELERO_RESTORE_HELPER_IMAGE}.tar.gz
          VELERO_IMAGE_BACKUP_FILE=${VELERO_IMAGE}-'build.'${GITHUB_RUN_NUMBER}.tar.gz
          VELERO_RESTORE_HELPER_IMAGE_BACKUP_FILE=${VELERO_RESTORE_HELPER_IMAGE}-'build.'${GITHUB_RUN_NUMBER}.tar.gz

          cp ${VELERO_IMAGE_FILE} ${VELERO_IMAGE_BACKUP_FILE}
          cp ${VELERO_RESTORE_HELPER_IMAGE_FILE} ${VELERO_RESTORE_HELPER_IMAGE_BACKUP_FILE}

          uploader ${VELERO_IMAGE_FILE} ${GCS_BUCKET}
          uploader ${VELERO_RESTORE_HELPER_IMAGE_FILE} ${GCS_BUCKET}
          uploader ${VELERO_IMAGE_BACKUP_FILE} ${GCS_BUCKET}
          uploader ${VELERO_RESTORE_HELPER_IMAGE_BACKUP_FILE} ${GCS_BUCKET}
