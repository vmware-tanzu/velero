// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: DeleteItemAction.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeleteItemAction_AppliesTo_FullMethodName = "/generated.DeleteItemAction/AppliesTo"
	DeleteItemAction_Execute_FullMethodName   = "/generated.DeleteItemAction/Execute"
)

// DeleteItemActionClient is the client API for DeleteItemAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteItemActionClient interface {
	AppliesTo(ctx context.Context, in *DeleteItemActionAppliesToRequest, opts ...grpc.CallOption) (*DeleteItemActionAppliesToResponse, error)
	Execute(ctx context.Context, in *DeleteItemActionExecuteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type deleteItemActionClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteItemActionClient(cc grpc.ClientConnInterface) DeleteItemActionClient {
	return &deleteItemActionClient{cc}
}

func (c *deleteItemActionClient) AppliesTo(ctx context.Context, in *DeleteItemActionAppliesToRequest, opts ...grpc.CallOption) (*DeleteItemActionAppliesToResponse, error) {
	out := new(DeleteItemActionAppliesToResponse)
	err := c.cc.Invoke(ctx, DeleteItemAction_AppliesTo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleteItemActionClient) Execute(ctx context.Context, in *DeleteItemActionExecuteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeleteItemAction_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteItemActionServer is the server API for DeleteItemAction service.
// All implementations should embed UnimplementedDeleteItemActionServer
// for forward compatibility
type DeleteItemActionServer interface {
	AppliesTo(context.Context, *DeleteItemActionAppliesToRequest) (*DeleteItemActionAppliesToResponse, error)
	Execute(context.Context, *DeleteItemActionExecuteRequest) (*Empty, error)
}

// UnimplementedDeleteItemActionServer should be embedded to have forward compatible implementations.
type UnimplementedDeleteItemActionServer struct {
}

func (UnimplementedDeleteItemActionServer) AppliesTo(context.Context, *DeleteItemActionAppliesToRequest) (*DeleteItemActionAppliesToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppliesTo not implemented")
}
func (UnimplementedDeleteItemActionServer) Execute(context.Context, *DeleteItemActionExecuteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeDeleteItemActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteItemActionServer will
// result in compilation errors.
type UnsafeDeleteItemActionServer interface {
	mustEmbedUnimplementedDeleteItemActionServer()
}

func RegisterDeleteItemActionServer(s grpc.ServiceRegistrar, srv DeleteItemActionServer) {
	s.RegisterService(&DeleteItemAction_ServiceDesc, srv)
}

func _DeleteItemAction_AppliesTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemActionAppliesToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteItemActionServer).AppliesTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteItemAction_AppliesTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteItemActionServer).AppliesTo(ctx, req.(*DeleteItemActionAppliesToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeleteItemAction_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemActionExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteItemActionServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteItemAction_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteItemActionServer).Execute(ctx, req.(*DeleteItemActionExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteItemAction_ServiceDesc is the grpc.ServiceDesc for DeleteItemAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteItemAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.DeleteItemAction",
	HandlerType: (*DeleteItemActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppliesTo",
			Handler:    _DeleteItemAction_AppliesTo_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DeleteItemAction_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DeleteItemAction.proto",
}
