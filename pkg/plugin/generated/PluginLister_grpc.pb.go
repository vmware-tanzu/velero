// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: PluginLister.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginLister_ListPlugins_FullMethodName = "/generated.PluginLister/ListPlugins"
)

// PluginListerClient is the client API for PluginLister service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginListerClient interface {
	ListPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error)
}

type pluginListerClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginListerClient(cc grpc.ClientConnInterface) PluginListerClient {
	return &pluginListerClient{cc}
}

func (c *pluginListerClient) ListPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	err := c.cc.Invoke(ctx, PluginLister_ListPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginListerServer is the server API for PluginLister service.
// All implementations should embed UnimplementedPluginListerServer
// for forward compatibility
type PluginListerServer interface {
	ListPlugins(context.Context, *Empty) (*ListPluginsResponse, error)
}

// UnimplementedPluginListerServer should be embedded to have forward compatible implementations.
type UnimplementedPluginListerServer struct {
}

func (UnimplementedPluginListerServer) ListPlugins(context.Context, *Empty) (*ListPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}

// UnsafePluginListerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginListerServer will
// result in compilation errors.
type UnsafePluginListerServer interface {
	mustEmbedUnimplementedPluginListerServer()
}

func RegisterPluginListerServer(s grpc.ServiceRegistrar, srv PluginListerServer) {
	s.RegisterService(&PluginLister_ServiceDesc, srv)
}

func _PluginLister_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginListerServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginLister_ListPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginListerServer).ListPlugins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginLister_ServiceDesc is the grpc.ServiceDesc for PluginLister service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginLister_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.PluginLister",
	HandlerType: (*PluginListerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlugins",
			Handler:    _PluginLister_ListPlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PluginLister.proto",
}
