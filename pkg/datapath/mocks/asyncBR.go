// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	datapath "github.com/vmware-tanzu/velero/pkg/datapath"
)

// AsyncBR is an autogenerated mock type for the AsyncBR type
type AsyncBR struct {
	mock.Mock
}

// Cancel provides a mock function with given fields:
func (_m *AsyncBR) Cancel() {
	_m.Called()
}

// Close provides a mock function with given fields: ctx
func (_m *AsyncBR) Close(ctx context.Context) {
	_m.Called(ctx)
}

// Init provides a mock function with given fields: ctx, param
func (_m *AsyncBR) Init(ctx context.Context, param interface{}) error {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartBackup provides a mock function with given fields: source, dataMoverConfig, param
func (_m *AsyncBR) StartBackup(source datapath.AccessPoint, dataMoverConfig map[string]string, param interface{}) error {
	ret := _m.Called(source, dataMoverConfig, param)

	if len(ret) == 0 {
		panic("no return value specified for StartBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(datapath.AccessPoint, map[string]string, interface{}) error); ok {
		r0 = rf(source, dataMoverConfig, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartRestore provides a mock function with given fields: snapshotID, target, dataMoverConfig
func (_m *AsyncBR) StartRestore(snapshotID string, target datapath.AccessPoint, dataMoverConfig map[string]string) error {
	ret := _m.Called(snapshotID, target, dataMoverConfig)

	if len(ret) == 0 {
		panic("no return value specified for StartRestore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, datapath.AccessPoint, map[string]string) error); ok {
		r0 = rf(snapshotID, target, dataMoverConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAsyncBR creates a new instance of AsyncBR. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncBR(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncBR {
	mock := &AsyncBR{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
