// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	udmrepo "github.com/vmware-tanzu/velero/pkg/repository/udmrepo"
)

// BackupRepoService is an autogenerated mock type for the BackupRepoService type
type BackupRepoService struct {
	mock.Mock
}

// DefaultMaintenanceFrequency provides a mock function with given fields:
func (_m *BackupRepoService) DefaultMaintenanceFrequency() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DefaultMaintenanceFrequency")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Init provides a mock function with given fields: ctx, repoOption, createNew
func (_m *BackupRepoService) Init(ctx context.Context, repoOption udmrepo.RepoOptions, createNew bool) error {
	ret := _m.Called(ctx, repoOption, createNew)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, udmrepo.RepoOptions, bool) error); ok {
		r0 = rf(ctx, repoOption, createNew)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Maintain provides a mock function with given fields: ctx, repoOption
func (_m *BackupRepoService) Maintain(ctx context.Context, repoOption udmrepo.RepoOptions) error {
	ret := _m.Called(ctx, repoOption)

	if len(ret) == 0 {
		panic("no return value specified for Maintain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, udmrepo.RepoOptions) error); ok {
		r0 = rf(ctx, repoOption)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: ctx, repoOption
func (_m *BackupRepoService) Open(ctx context.Context, repoOption udmrepo.RepoOptions) (udmrepo.BackupRepo, error) {
	ret := _m.Called(ctx, repoOption)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 udmrepo.BackupRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, udmrepo.RepoOptions) (udmrepo.BackupRepo, error)); ok {
		return rf(ctx, repoOption)
	}
	if rf, ok := ret.Get(0).(func(context.Context, udmrepo.RepoOptions) udmrepo.BackupRepo); ok {
		r0 = rf(ctx, repoOption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(udmrepo.BackupRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, udmrepo.RepoOptions) error); ok {
		r1 = rf(ctx, repoOption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBackupRepoService creates a new instance of BackupRepoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackupRepoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackupRepoService {
	mock := &BackupRepoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
