// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	zapcore "go.uber.org/zap/zapcore"
)

// Core is an autogenerated mock type for the Core type
type Core struct {
	mock.Mock
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *Core) Check(_a0 zapcore.Entry, _a1 *zapcore.CheckedEntry) *zapcore.CheckedEntry {
	ret := _m.Called(_a0, _a1)

	var r0 *zapcore.CheckedEntry
	if rf, ok := ret.Get(0).(func(zapcore.Entry, *zapcore.CheckedEntry) *zapcore.CheckedEntry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zapcore.CheckedEntry)
		}
	}

	return r0
}

// Enabled provides a mock function with given fields: _a0
func (_m *Core) Enabled(_a0 zapcore.Level) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(zapcore.Level) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Sync provides a mock function with given fields:
func (_m *Core) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// With provides a mock function with given fields: _a0
func (_m *Core) With(_a0 []zapcore.Field) zapcore.Core {
	ret := _m.Called(_a0)

	var r0 zapcore.Core
	if rf, ok := ret.Get(0).(func([]zapcore.Field) zapcore.Core); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zapcore.Core)
		}
	}

	return r0
}

// Write provides a mock function with given fields: _a0, _a1
func (_m *Core) Write(_a0 zapcore.Entry, _a1 []zapcore.Field) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(zapcore.Entry, []zapcore.Field) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCore creates a new instance of Core. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCore(t mockConstructorTestingTNewCore) *Core {
	mock := &Core{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
