// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	podvolume "github.com/vmware-tanzu/velero/pkg/podvolume"

	resourcepolicies "github.com/vmware-tanzu/velero/internal/resourcepolicies"

	v1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
)

// MockBackupper is an autogenerated mock type for the Backupper type
type MockBackupper struct {
	mock.Mock
}

type MockBackupper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackupper) EXPECT() *MockBackupper_Expecter {
	return &MockBackupper_Expecter{mock: &_m.Mock}
}

// BackupPodVolumes provides a mock function with given fields: backup, pod, volumesToBackup, resPolicies, log
func (_m *MockBackupper) BackupPodVolumes(backup *v1.Backup, pod *corev1.Pod, volumesToBackup []string, resPolicies *resourcepolicies.Policies, log logrus.FieldLogger) ([]*v1.PodVolumeBackup, *podvolume.PVCBackupSummary, []error) {
	ret := _m.Called(backup, pod, volumesToBackup, resPolicies, log)

	if len(ret) == 0 {
		panic("no return value specified for BackupPodVolumes")
	}

	var r0 []*v1.PodVolumeBackup
	var r1 *podvolume.PVCBackupSummary
	var r2 []error
	if rf, ok := ret.Get(0).(func(*v1.Backup, *corev1.Pod, []string, *resourcepolicies.Policies, logrus.FieldLogger) ([]*v1.PodVolumeBackup, *podvolume.PVCBackupSummary, []error)); ok {
		return rf(backup, pod, volumesToBackup, resPolicies, log)
	}
	if rf, ok := ret.Get(0).(func(*v1.Backup, *corev1.Pod, []string, *resourcepolicies.Policies, logrus.FieldLogger) []*v1.PodVolumeBackup); ok {
		r0 = rf(backup, pod, volumesToBackup, resPolicies, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.PodVolumeBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Backup, *corev1.Pod, []string, *resourcepolicies.Policies, logrus.FieldLogger) *podvolume.PVCBackupSummary); ok {
		r1 = rf(backup, pod, volumesToBackup, resPolicies, log)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*podvolume.PVCBackupSummary)
		}
	}

	if rf, ok := ret.Get(2).(func(*v1.Backup, *corev1.Pod, []string, *resourcepolicies.Policies, logrus.FieldLogger) []error); ok {
		r2 = rf(backup, pod, volumesToBackup, resPolicies, log)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]error)
		}
	}

	return r0, r1, r2
}

// MockBackupper_BackupPodVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupPodVolumes'
type MockBackupper_BackupPodVolumes_Call struct {
	*mock.Call
}

// BackupPodVolumes is a helper method to define mock.On call
//   - backup *v1.Backup
//   - pod *corev1.Pod
//   - volumesToBackup []string
//   - resPolicies *resourcepolicies.Policies
//   - log logrus.FieldLogger
func (_e *MockBackupper_Expecter) BackupPodVolumes(backup interface{}, pod interface{}, volumesToBackup interface{}, resPolicies interface{}, log interface{}) *MockBackupper_BackupPodVolumes_Call {
	return &MockBackupper_BackupPodVolumes_Call{Call: _e.mock.On("BackupPodVolumes", backup, pod, volumesToBackup, resPolicies, log)}
}

func (_c *MockBackupper_BackupPodVolumes_Call) Run(run func(backup *v1.Backup, pod *corev1.Pod, volumesToBackup []string, resPolicies *resourcepolicies.Policies, log logrus.FieldLogger)) *MockBackupper_BackupPodVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Backup), args[1].(*corev1.Pod), args[2].([]string), args[3].(*resourcepolicies.Policies), args[4].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockBackupper_BackupPodVolumes_Call) Return(_a0 []*v1.PodVolumeBackup, _a1 *podvolume.PVCBackupSummary, _a2 []error) *MockBackupper_BackupPodVolumes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBackupper_BackupPodVolumes_Call) RunAndReturn(run func(*v1.Backup, *corev1.Pod, []string, *resourcepolicies.Policies, logrus.FieldLogger) ([]*v1.PodVolumeBackup, *podvolume.PVCBackupSummary, []error)) *MockBackupper_BackupPodVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// WaitAllPodVolumesProcessed provides a mock function with given fields: log
func (_m *MockBackupper) WaitAllPodVolumesProcessed(log logrus.FieldLogger) ([]*v1.PodVolumeBackup, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for WaitAllPodVolumesProcessed")
	}

	var r0 []*v1.PodVolumeBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) ([]*v1.PodVolumeBackup, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) []*v1.PodVolumeBackup); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.PodVolumeBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(logrus.FieldLogger) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBackupper_WaitAllPodVolumesProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitAllPodVolumesProcessed'
type MockBackupper_WaitAllPodVolumesProcessed_Call struct {
	*mock.Call
}

// WaitAllPodVolumesProcessed is a helper method to define mock.On call
//   - log logrus.FieldLogger
func (_e *MockBackupper_Expecter) WaitAllPodVolumesProcessed(log interface{}) *MockBackupper_WaitAllPodVolumesProcessed_Call {
	return &MockBackupper_WaitAllPodVolumesProcessed_Call{Call: _e.mock.On("WaitAllPodVolumesProcessed", log)}
}

func (_c *MockBackupper_WaitAllPodVolumesProcessed_Call) Run(run func(log logrus.FieldLogger)) *MockBackupper_WaitAllPodVolumesProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockBackupper_WaitAllPodVolumesProcessed_Call) Return(_a0 []*v1.PodVolumeBackup, _a1 error) *MockBackupper_WaitAllPodVolumesProcessed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackupper_WaitAllPodVolumesProcessed_Call) RunAndReturn(run func(logrus.FieldLogger) ([]*v1.PodVolumeBackup, error)) *MockBackupper_WaitAllPodVolumesProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBackupper creates a new instance of MockBackupper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackupper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackupper {
	mock := &MockBackupper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
